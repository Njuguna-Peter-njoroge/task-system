"use strict";
// script.js (This would be generated by TypeScript compilation if you write in index.ts)
// --- TypeScript Classes (copied and adapted from your index.ts) ---
// Note: For a direct script.js, these would just be standard JS classes.
// No 'implements' keyword as it's a TS-only feature for interfaces.
class User {
    constructor(id, name, email) {
        this.id = id;
        this.name = name;
        this.email = email;
    }
}
class Task {
    constructor(id, title, description, assignedTo = undefined) {
        this.id = id;
        this.title = title;
        this.description = description;
        this.assignedTo = assignedTo;
    }
}
class UserService {
    constructor() {
        this.users = [];
        this.lastUserId = 0;
    }
    createUser(name, email) {
        const newUser = new User(++this.lastUserId, name, email);
        this.users.push(newUser);
        return newUser;
    }
    getAllUsers() {
        return this.users;
    }
    getUserById(id) {
        return this.users.find(user => user.id === id);
    }
    deleteUser(id) {
        const index = this.users.findIndex(user => user.id === id);
        if (index !== -1) {
            this.users.splice(index, 1);
            return true; // Indicate success
        }
        return false; // Indicate failure
    }
}
class TaskService {
    constructor(userService) {
        this.tasks = [];
        this.lastTaskId = 0;
        this.userService = userService; // Injected UserService
    }
    createTask(title, description) {
        const newTask = new Task(++this.lastTaskId, title, description);
        this.tasks.push(newTask);
        return newTask;
    }
    getAllTasks() {
        return this.tasks;
    }
    assignTask(taskId, userId) {
        const task = this.tasks.find(t => t.id === taskId);
        const user = this.userService.getUserById(userId); // Use injected userService
        if (task && user) {
            task.assignedTo = userId;
            console.log(`Task ${task.id} assigned to user ${user.name}`);
            return true;
        }
        console.warn(`Failed to assign task: Task ID ${taskId} or User ID ${userId} not found.`);
        return false;
    }
    unassignTask(taskId) {
        const task = this.tasks.find(t => t.id === taskId);
        if (!task) {
            console.warn(`Failed to unassign task: Task ID ${taskId} not found.`);
            return false;
        }
        if (task.assignedTo === undefined) {
            console.warn(`Task ${taskId} is not assigned.`);
            return false;
        }
        task.assignedTo = undefined;
        console.log(`Task ${task.id} unassigned.`);
        return true;
    }
    deleteTask(id) {
        const index = this.tasks.findIndex(task => task.id === id);
        if (index !== -1) {
            this.tasks.splice(index, 1);
            return true; // Indicate success
        }
        return false; // Indicate failure
    }
}
// --- DOM Elements ---
// User Manager Elements
const createUserNameInput = document.getElementById('createUserName');
const createUserEmailInput = document.getElementById('createUserEmail');
const createUserBtn = document.getElementById('createUserBtn');
const getUserIdInput = document.getElementById('getUserId');
const getUserBtn = document.getElementById('getUserBtn');
const deleteUserIdInput = document.getElementById('deleteUserId');
const deleteUserBtn = document.getElementById('deleteUserBtn');
const assignTaskIdInput = document.getElementById('assignTaskId');
const assignUserIdInput = document.getElementById('assignUserId');
const assignTaskBtn = document.getElementById('assignTaskBtn');
const userListDisplay = document.getElementById('userList');
// Task Manager Elements
const createTaskTitleInput = document.getElementById('createTaskTitle');
const createTaskDescriptionInput = document.getElementById('createTaskDescription');
const createTaskBtn = document.getElementById('createTaskBtn');
const unassignTaskIdInput = document.getElementById('unassignTaskId');
const unassignTaskBtn = document.getElementById('unassignTaskBtn');
const deleteTaskIdInput = document.getElementById('deleteTaskId');
const deleteTaskBtn = document.getElementById('deleteTaskBtn');
const taskListDisplay = document.getElementById('taskList');
// --- Service Instances ---
const userService = new UserService();
const taskService = new TaskService(userService); // Inject userService into TaskService
// --- Helper Functions to Render Lists ---
function renderUsers() {
    userListDisplay.innerHTML = ''; // Clear current list
    const users = userService.getAllUsers();
    if (users.length === 0) {
        userListDisplay.innerHTML = '<li>No users created yet.</li>';
        return;
    }
    users.forEach(user => {
        const li = document.createElement('li');
        li.innerHTML = `
            <span>ID: ${user.id}</span>
            <strong>${user.name}</strong> (${user.email})
        `;
        userListDisplay.appendChild(li);
    });
}
function renderTasks() {
    taskListDisplay.innerHTML = ''; // Clear current list
    const tasks = taskService.getAllTasks();
    if (tasks.length === 0) {
        taskListDisplay.innerHTML = '<li>No tasks created yet.</li>';
        return;
    }
    tasks.forEach(task => {
        const assignedUser = task.assignedTo ? userService.getUserById(task.assignedTo) : null;
        const assignedUserName = assignedUser ? `Assigned to: ${assignedUser.name} (ID: ${assignedUser.id})` : 'Unassigned';
        const li = document.createElement('li');
        li.innerHTML = `
            <span>ID: ${task.id}</span>
            <strong>${task.title}</strong>: ${task.description} <br>
            <small>${assignedUserName}</small>
        `;
        taskListDisplay.appendChild(li);
    });
}
// --- Event Listeners ---
document.addEventListener('DOMContentLoaded', () => {
    // Initial render
    renderUsers();
    renderTasks();
    // Create User
    createUserBtn.addEventListener('click', () => {
        const name = createUserNameInput.value.trim();
        const email = createUserEmailInput.value.trim();
        if (name && email) {
            userService.createUser(name, email);
            alert(`User '${name}' created!`);
            createUserNameInput.value = '';
            createUserEmailInput.value = '';
            renderUsers();
        }
        else {
            alert('Please enter user name and email.');
        }
    });
    // Get User by ID (simple alert for now)
    getUserBtn.addEventListener('click', () => {
        const id = parseInt(getUserIdInput.value.trim());
        if (!isNaN(id)) {
            const user = userService.getUserById(id);
            if (user) {
                alert(`Found User: ID: ${user.id}, Name: ${user.name}, Email: ${user.email}`);
            }
            else {
                alert(`User with ID ${id} not found.`);
            }
            getUserIdInput.value = '';
        }
        else {
            alert('Please enter a valid user ID.');
        }
    });
    // Delete User
    deleteUserBtn.addEventListener('click', () => {
        const id = parseInt(deleteUserIdInput.value.trim());
        if (!isNaN(id)) {
            const success = userService.deleteUser(id);
            if (success) {
                alert(`User with ID ${id} deleted!`);
                // Also need to unassign any tasks assigned to this user
                taskService.getAllTasks().forEach(task => {
                    if (task.assignedTo === id) {
                        taskService.unassignTask(task.id);
                    }
                });
                renderUsers();
                renderTasks(); // Re-render tasks as assignments might change
            }
            else {
                alert(`User with ID ${id} not found.`);
            }
            deleteUserIdInput.value = '';
        }
        else {
            alert('Please enter a valid user ID.');
        }
    });
    // Create Task
    createTaskBtn.addEventListener('click', () => {
        const title = createTaskTitleInput.value.trim();
        const description = createTaskDescriptionInput.value.trim();
        if (title && description) {
            taskService.createTask(title, description);
            alert(`Task '${title}' created!`);
            createTaskTitleInput.value = '';
            createTaskDescriptionInput.value = '';
            renderTasks();
        }
        else {
            alert('Please enter task title and description.');
        }
    });
    // Assign Task
    assignTaskBtn.addEventListener('click', () => {
        const taskId = parseInt(assignTaskIdInput.value.trim());
        const userId = parseInt(assignUserIdInput.value.trim());
        if (!isNaN(taskId) && !isNaN(userId)) {
            const success = taskService.assignTask(taskId, userId);
            if (success) {
                alert(`Task ${taskId} assigned to User ${userId}!`);
                renderTasks();
            }
            else {
                alert('Assignment failed. Check Task ID and User ID.');
            }
            assignTaskIdInput.value = '';
            assignUserIdInput.value = '';
        }
        else {
            alert('Please enter valid Task ID and User ID.');
        }
    });
    // Unassign Task
    unassignTaskBtn.addEventListener('click', () => {
        const taskId = parseInt(unassignTaskIdInput.value.trim());
        if (!isNaN(taskId)) {
            const success = taskService.unassignTask(taskId);
            if (success) {
                alert(`Task ${taskId} unassigned!`);
                renderTasks();
            }
            else {
                alert('Unassignment failed. Task not found or not assigned.');
            }
            unassignTaskIdInput.value = '';
        }
        else {
            alert('Please enter a valid Task ID.');
        }
    });
    // Delete Task
    deleteTaskBtn.addEventListener('click', () => {
        const id = parseInt(deleteTaskIdInput.value.trim());
        if (!isNaN(id)) {
            const success = taskService.deleteTask(id);
            if (success) {
                alert(`Task with ID ${id} deleted!`);
                renderTasks();
            }
            else {
                alert(`Task with ID ${id} not found.`);
            }
            deleteTaskIdInput.value = '';
        }
        else {
            alert('Please enter a valid Task ID.');
        }
    });
});
